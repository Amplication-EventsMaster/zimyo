/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BookingService } from "../booking.service";
import { BookingCreateInput } from "./BookingCreateInput";
import { Booking } from "./Booking";
import { BookingFindManyArgs } from "./BookingFindManyArgs";
import { BookingWhereUniqueInput } from "./BookingWhereUniqueInput";
import { BookingUpdateInput } from "./BookingUpdateInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";
import { BookingReferenceFindManyArgs } from "../../bookingReference/base/BookingReferenceFindManyArgs";
import { BookingReference } from "../../bookingReference/base/BookingReference";
import { BookingReferenceWhereUniqueInput } from "../../bookingReference/base/BookingReferenceWhereUniqueInput";

export class BookingControllerBase {
  constructor(protected readonly service: BookingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Booking })
  async createBooking(
    @common.Body() data: BookingCreateInput
  ): Promise<Booking> {
    return await this.service.createBooking({
      data: {
        ...data,

        dailyRef: data.dailyRef
          ? {
              connect: data.dailyRef,
            }
          : undefined,
      },
      select: {
        attendees: true,
        cancellationReason: true,
        createdAt: true,
        customInputs: true,

        dailyRef: {
          select: {
            id: true,
          },
        },

        description: true,
        destinationCalendarId: true,
        dynamicEventSlugRef: true,
        dynamicGroupSlugRef: true,
        endTime: true,
        eventTypeId: true,
        fromReschedule: true,
        id: true,
        location: true,
        paid: true,
        recurringEventId: true,
        rejectionReason: true,
        rescheduled: true,
        smsReminderNumber: true,
        startTime: true,
        status: true,
        title: true,
        uid: true,
        updatedAt: true,
        userId: true,
        workflowReminders: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Booking] })
  @ApiNestedQuery(BookingFindManyArgs)
  async bookings(@common.Req() request: Request): Promise<Booking[]> {
    const args = plainToClass(BookingFindManyArgs, request.query);
    return this.service.bookings({
      ...args,
      select: {
        attendees: true,
        cancellationReason: true,
        createdAt: true,
        customInputs: true,

        dailyRef: {
          select: {
            id: true,
          },
        },

        description: true,
        destinationCalendarId: true,
        dynamicEventSlugRef: true,
        dynamicGroupSlugRef: true,
        endTime: true,
        eventTypeId: true,
        fromReschedule: true,
        id: true,
        location: true,
        paid: true,
        recurringEventId: true,
        rejectionReason: true,
        rescheduled: true,
        smsReminderNumber: true,
        startTime: true,
        status: true,
        title: true,
        uid: true,
        updatedAt: true,
        userId: true,
        workflowReminders: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Booking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async booking(
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Booking | null> {
    const result = await this.service.booking({
      where: params,
      select: {
        attendees: true,
        cancellationReason: true,
        createdAt: true,
        customInputs: true,

        dailyRef: {
          select: {
            id: true,
          },
        },

        description: true,
        destinationCalendarId: true,
        dynamicEventSlugRef: true,
        dynamicGroupSlugRef: true,
        endTime: true,
        eventTypeId: true,
        fromReschedule: true,
        id: true,
        location: true,
        paid: true,
        recurringEventId: true,
        rejectionReason: true,
        rescheduled: true,
        smsReminderNumber: true,
        startTime: true,
        status: true,
        title: true,
        uid: true,
        updatedAt: true,
        userId: true,
        workflowReminders: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Booking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBooking(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() data: BookingUpdateInput
  ): Promise<Booking | null> {
    try {
      return await this.service.updateBooking({
        where: params,
        data: {
          ...data,

          dailyRef: data.dailyRef
            ? {
                connect: data.dailyRef,
              }
            : undefined,
        },
        select: {
          attendees: true,
          cancellationReason: true,
          createdAt: true,
          customInputs: true,

          dailyRef: {
            select: {
              id: true,
            },
          },

          description: true,
          destinationCalendarId: true,
          dynamicEventSlugRef: true,
          dynamicGroupSlugRef: true,
          endTime: true,
          eventTypeId: true,
          fromReschedule: true,
          id: true,
          location: true,
          paid: true,
          recurringEventId: true,
          rejectionReason: true,
          rescheduled: true,
          smsReminderNumber: true,
          startTime: true,
          status: true,
          title: true,
          uid: true,
          updatedAt: true,
          userId: true,
          workflowReminders: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Booking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBooking(
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Booking | null> {
    try {
      return await this.service.deleteBooking({
        where: params,
        select: {
          attendees: true,
          cancellationReason: true,
          createdAt: true,
          customInputs: true,

          dailyRef: {
            select: {
              id: true,
            },
          },

          description: true,
          destinationCalendarId: true,
          dynamicEventSlugRef: true,
          dynamicGroupSlugRef: true,
          endTime: true,
          eventTypeId: true,
          fromReschedule: true,
          id: true,
          location: true,
          paid: true,
          recurringEventId: true,
          rejectionReason: true,
          rescheduled: true,
          smsReminderNumber: true,
          startTime: true,
          status: true,
          title: true,
          uid: true,
          updatedAt: true,
          userId: true,
          workflowReminders: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/payment")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findPayment(
    @common.Req() request: Request,
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayment(params.id, {
      ...query,
      select: {
        amount: true,

        booking: {
          select: {
            id: true,
          },
        },

        currency: true,
        data: true,
        externalId: true,
        fee: true,
        id: true,
        refunded: true,
        success: true,
        type: true,
        uid: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payment")
  async connectPayment(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        connect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payment")
  async updatePayment(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        set: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payment")
  async disconnectPayment(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payment: {
        disconnect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/references")
  @ApiNestedQuery(BookingReferenceFindManyArgs)
  async findReferences(
    @common.Req() request: Request,
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<BookingReference[]> {
    const query = plainToClass(BookingReferenceFindManyArgs, request.query);
    const results = await this.service.findReferences(params.id, {
      ...query,
      select: {
        booking: {
          select: {
            id: true,
          },
        },

        deleted: true,
        externalCalendarId: true,
        id: true,
        meetingId: true,
        meetingPassword: true,
        meetingUrl: true,
        typeField: true,
        uid: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/references")
  async connectReferences(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: BookingReferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      references: {
        connect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/references")
  async updateReferences(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: BookingReferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      references: {
        set: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/references")
  async disconnectReferences(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: BookingReferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      references: {
        disconnect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }
}
